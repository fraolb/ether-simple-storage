const { ethers } = require("ethers");
const fs = require("fs-extra");
require("dotenv").config();

async function main() {
  //http://127.0.0.1:7545

  const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL);
  const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

  const abi = fs.readFileSync(
    "./build/SimpleStorage_sol_SimpleStorage.abi",
    "utf8"
  );
  const binary = fs.readFileSync(
    "./build/SimpleStorage_sol_SimpleStorage.bin",
    "utf-8"
  );
  const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
  console.log("Deploying please wait...");
  const contract = await contractFactory.deploy();
  //const deploymentReceipt = await contract.deployTransaction.wait(1);
  //console.log(deploymentReceipt);

  console.log(`contract address: ${contract.address}`);

  //Get number
  const currentFavoriteNumber = await contract.retrieve();
  console.log(`Current favNum: ${currentFavoriteNumber.toString()}`);

  const transactionResponse = await contract.store("7");
  const transactionReceipt = await transactionResponse.wait(1);
  const updatedFavNum = await contract.retrieve();
  console.log(`Updated favNum: ${updatedFavNum.toString()}`);

  // console.log("lets deploy with only transaction data");
  // const nonce = await wallet.getTransactionCount();
  // console.log("the nonce is ", nonce);
  // const tx = {
  //   nonce: nonce,
  //   gasPrice: 20000000000,
  //   gasLimit: 6721975,
  //   to: null,
  //   value: 0,
  //   data: "0x60806040526040518060400160405280600281526020016040518060400160405280600581526020017f4672616f6c000000000000000000000000000000000000000000000000000000815250815250600260008201518160000155602082015181600101908051906020019061007792919061008c565b50505034801561008657600080fd5b50610190565b8280546100989061015e565b90600052602060002090601f0160209004810192826100ba5760008555610101565b82601f106100d357805160ff1916838001178555610101565b82800160010185558215610101579182015b828111156101005782518255916020019190600101906100e5565b5b50905061010e9190610112565b5090565b5b8082111561012b576000816000905550600101610113565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061017657607f821691505b6020821081141561018a5761018961012f565b5b50919050565b6108cf8061019f6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c80632e64cec11461006757806343ec8f47146100855780636057361d146100b55780636f760f41146100d157806377ec2b55146100ed5780639e7a13ad1461010c575b600080fd5b61006f61013d565b60405161007c9190610435565b60405180910390f35b61009f600480360381019061009a91906105aa565b610146565b6040516100ac9190610435565b60405180910390f35b6100cf60048036038101906100ca919061061f565b610174565b005b6100eb60048036038101906100e6919061064c565b610193565b005b6100f5610223565b604051610103929190610730565b60405180910390f35b6101266004803603810190610121919061061f565b6102bd565b604051610134929190610730565b60405180910390f35b60008054905090565b6001818051602081018201805184825260208301602085012081835280955050505050506000915090505481565b80600081905550600160005461018a919061078f565b60008190555050565b600460405180604001604052808381526020018481525090806001815401808255809150506001900390600052602060002090600202016000909190919091506000820151816000015560208201518160010190805190602001906101f9929190610379565b5050508060018360405161020d9190610821565b9081526020016040518091039020819055505050565b600280600001549080600101805461023a90610867565b80601f016020809104026020016040519081016040528092919081815260200182805461026690610867565b80156102b35780601f10610288576101008083540402835291602001916102b3565b820191906000526020600020905b81548152906001019060200180831161029657829003601f168201915b5050505050905082565b600481815481106102cd57600080fd5b90600052602060002090600202016000915090508060000154908060010180546102f690610867565b80601f016020809104026020016040519081016040528092919081815260200182805461032290610867565b801561036f5780601f106103445761010080835404028352916020019161036f565b820191906000526020600020905b81548152906001019060200180831161035257829003601f168201915b5050505050905082565b82805461038590610867565b90600052602060002090601f0160209004810192826103a757600085556103ee565b82601f106103c057805160ff19168380011785556103ee565b828001600101855582156103ee579182015b828111156103ed5782518255916020019190600101906103d2565b5b5090506103fb91906103ff565b5090565b5b80821115610418576000816000905550600101610400565b5090565b6000819050919050565b61042f8161041c565b82525050565b600060208201905061044a6000830184610426565b92915050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6104b78261046e565b810181811067ffffffffffffffff821117156104d6576104d561047f565b5b80604052505050565b60006104e9610450565b90506104f582826104ae565b919050565b600067ffffffffffffffff8211156105155761051461047f565b5b61051e8261046e565b9050602081019050919050565b82818337600083830152505050565b600061054d610548846104fa565b6104df565b90508281526020810184848401111561056957610568610469565b5b61057484828561052b565b509392505050565b600082601f83011261059157610590610464565b5b81356105a184826020860161053a565b91505092915050565b6000602082840312156105c0576105bf61045a565b5b600082013567ffffffffffffffff8111156105de576105dd61045f565b5b6105ea8482850161057c565b91505092915050565b6105fc8161041c565b811461060757600080fd5b50565b600081359050610619816105f3565b92915050565b6000602082840312156106355761063461045a565b5b60006106438482850161060a565b91505092915050565b600080604083850312156106635761066261045a565b5b600083013567ffffffffffffffff8111156106815761068061045f565b5b61068d8582860161057c565b925050602061069e8582860161060a565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b838110156106e25780820151818401526020810190506106c7565b838111156106f1576000848401525b50505050565b6000610702826106a8565b61070c81856106b3565b935061071c8185602086016106c4565b6107258161046e565b840191505092915050565b60006040820190506107456000830185610426565b818103602083015261075781846106f7565b90509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061079a8261041c565b91506107a58361041c565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156107da576107d9610760565b5b828201905092915050565b600081905092915050565b60006107fb826106a8565b61080581856107e5565b93506108158185602086016106c4565b80840191505092915050565b600061082d82846107f0565b915081905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061087f57607f821691505b6020821081141561089357610892610838565b5b5091905056fea26469706673582212208045a864c97d4d6e08328937e68cc8dc6b4c82a4c0b030cdce9b120b8f357e6d64736f6c63430008080033",
  //   chainId: 35777,
  // };
  // const sendTxResponse = await wallet.sendTransaction(tx);
  // await sendTxResponse.wait(1);
  // console.log(signedTxResponse);
}

main()
  .then(() => process.exit(0))
  .catch((error) => {
    console.log(error);
    process.exit(1);
  });
